state 0 //

    0 $accept: . start

    AT            shift, and goto state 4
    DOLLAR        shift, and goto state 3
    OPEN_BRACKET  shift, and goto state 8

    expr        goto state 2
    index       goto state 6
    parentExpr  goto state 5
    selector    goto state 7
    start       goto state 1

state 1 // AT [$end]

    0 $accept: start .  [$end]

    $end  accept

state 2 // AT [$end]

    1 start: expr .  [$end]

    $end  reduce using rule 1 (start)

state 3 // DOLLAR

    2 expr: DOLLAR .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
    3 expr: DOLLAR . index  // assoc %left, prec 5
    4 expr: DOLLAR . DOT segment  // assoc %left, prec 5
    5 expr: DOLLAR . DOTDOT segment  // assoc %left, prec 5

    $end               reduce using rule 2 (expr)
    CLOSE_BRACKET      reduce using rule 2 (expr)
    CLOSE_PARENTHESIS  reduce using rule 2 (expr)
    COMMA              reduce using rule 2 (expr)
    DOT                shift, and goto state 97
    DOTDOT             shift, and goto state 98
    EQ                 reduce using rule 2 (expr)
    GT                 reduce using rule 2 (expr)
    GTE                reduce using rule 2 (expr)
    IN                 reduce using rule 2 (expr)
    LT                 reduce using rule 2 (expr)
    LTE                reduce using rule 2 (expr)
    NEQ                reduce using rule 2 (expr)
    NIN                reduce using rule 2 (expr)
    NRE                reduce using rule 2 (expr)
    OPEN_BRACKET       shift, and goto state 61
    RE                 reduce using rule 2 (expr)

    index  goto state 96

state 4 // AT

    6 expr: AT .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
    7 expr: AT . index  // assoc %left, prec 5
    8 expr: AT . DOT segment  // assoc %left, prec 5
    9 expr: AT . DOTDOT segment  // assoc %left, prec 5
   13 expr: AT . DOT callExpr  // assoc %left, prec 5
   14 parentExpr: AT . AT  // assoc %left, prec 5
   15 parentExpr: AT . AT index  // assoc %left, prec 5
   16 parentExpr: AT . AT DOT segment  // assoc %left, prec 5
   17 parentExpr: AT . AT DOTDOT segment  // assoc %left, prec 5
   18 parentExpr: AT . AT DOT parentExpr  // assoc %left, prec 5
   19 parentExpr: AT . AT DOTDOT parentExpr  // assoc %left, prec 5

    $end               reduce using rule 6 (expr)
    AT                 shift, and goto state 60
    CLOSE_BRACKET      reduce using rule 6 (expr)
    CLOSE_PARENTHESIS  reduce using rule 6 (expr)
    COMMA              reduce using rule 6 (expr)
    DOT                shift, and goto state 58
    DOTDOT             shift, and goto state 59
    EQ                 reduce using rule 6 (expr)
    GT                 reduce using rule 6 (expr)
    GTE                reduce using rule 6 (expr)
    IN                 reduce using rule 6 (expr)
    LT                 reduce using rule 6 (expr)
    LTE                reduce using rule 6 (expr)
    NEQ                reduce using rule 6 (expr)
    NIN                reduce using rule 6 (expr)
    NRE                reduce using rule 6 (expr)
    OPEN_BRACKET       shift, and goto state 61
    RE                 reduce using rule 6 (expr)

    index  goto state 57

state 5 // AT AT [$end]

   10 expr: parentExpr .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]

    $end               reduce using rule 10 (expr)
    CLOSE_BRACKET      reduce using rule 10 (expr)
    CLOSE_PARENTHESIS  reduce using rule 10 (expr)
    COMMA              reduce using rule 10 (expr)
    EQ                 reduce using rule 10 (expr)
    GT                 reduce using rule 10 (expr)
    GTE                reduce using rule 10 (expr)
    IN                 reduce using rule 10 (expr)
    LT                 reduce using rule 10 (expr)
    LTE                reduce using rule 10 (expr)
    NEQ                reduce using rule 10 (expr)
    NIN                reduce using rule 10 (expr)
    NRE                reduce using rule 10 (expr)
    RE                 reduce using rule 10 (expr)

state 6 // OPEN_BRACKET CLOSE_BRACKET [$end]

   11 expr: index .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]

    $end               reduce using rule 11 (expr)
    CLOSE_BRACKET      reduce using rule 11 (expr)
    CLOSE_PARENTHESIS  reduce using rule 11 (expr)
    COMMA              reduce using rule 11 (expr)
    EQ                 reduce using rule 11 (expr)
    GT                 reduce using rule 11 (expr)
    GTE                reduce using rule 11 (expr)
    IN                 reduce using rule 11 (expr)
    LT                 reduce using rule 11 (expr)
    LTE                reduce using rule 11 (expr)
    NEQ                reduce using rule 11 (expr)
    NIN                reduce using rule 11 (expr)
    NRE                reduce using rule 11 (expr)
    RE                 reduce using rule 11 (expr)

state 7 // OPEN_BRACKET COLON CLOSE_BRACKET [$end]

   12 expr: selector .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]

    $end               reduce using rule 12 (expr)
    CLOSE_BRACKET      reduce using rule 12 (expr)
    CLOSE_PARENTHESIS  reduce using rule 12 (expr)
    COMMA              reduce using rule 12 (expr)
    EQ                 reduce using rule 12 (expr)
    GT                 reduce using rule 12 (expr)
    GTE                reduce using rule 12 (expr)
    IN                 reduce using rule 12 (expr)
    LT                 reduce using rule 12 (expr)
    LTE                reduce using rule 12 (expr)
    NEQ                reduce using rule 12 (expr)
    NIN                reduce using rule 12 (expr)
    NRE                reduce using rule 12 (expr)
    RE                 reduce using rule 12 (expr)

state 8 // OPEN_BRACKET

   38 index: OPEN_BRACKET . intExpr CLOSE_BRACKET  // assoc %left, prec 4
   39 index: OPEN_BRACKET . CLOSE_BRACKET  // assoc %left, prec 4
   40 selector: OPEN_BRACKET . range CLOSE_BRACKET  // assoc %left, prec 4
   41 selector: OPEN_BRACKET . matchers CLOSE_BRACKET  // assoc %left, prec 4

    AT             shift, and goto state 4
    CLOSE_BRACKET  shift, and goto state 12
    COLON          shift, and goto state 15
    DOLLAR         shift, and goto state 3
    IDENTIFIER     shift, and goto state 9
    INT            shift, and goto state 21
    MUL            shift, and goto state 16
    OPEN_BRACKET   shift, and goto state 8
    QUESTION       shift, and goto state 20
    STRING         shift, and goto state 10
    SUB            shift, and goto state 22

    expr        goto state 18
    index       goto state 6
    intExpr     goto state 11
    matcher     goto state 17
    matchers    goto state 14
    member      goto state 19
    parentExpr  goto state 5
    range       goto state 13
    selector    goto state 7

state 9 // OPEN_BRACKET IDENTIFIER

   29 member: IDENTIFIER .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 29 (member)
    CLOSE_BRACKET      reduce using rule 29 (member)
    CLOSE_PARENTHESIS  reduce using rule 29 (member)
    COMMA              reduce using rule 29 (member)
    DOT                reduce using rule 29 (member)
    DOTDOT             reduce using rule 29 (member)
    EQ                 reduce using rule 29 (member)
    GT                 reduce using rule 29 (member)
    GTE                reduce using rule 29 (member)
    IN                 reduce using rule 29 (member)
    LT                 reduce using rule 29 (member)
    LTE                reduce using rule 29 (member)
    NEQ                reduce using rule 29 (member)
    NIN                reduce using rule 29 (member)
    NRE                reduce using rule 29 (member)
    OPEN_BRACKET       reduce using rule 29 (member)
    RE                 reduce using rule 29 (member)

state 10 // OPEN_BRACKET STRING

   30 member: STRING .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 30 (member)
    CLOSE_BRACKET      reduce using rule 30 (member)
    CLOSE_PARENTHESIS  reduce using rule 30 (member)
    COMMA              reduce using rule 30 (member)
    DOT                reduce using rule 30 (member)
    DOTDOT             reduce using rule 30 (member)
    EQ                 reduce using rule 30 (member)
    GT                 reduce using rule 30 (member)
    GTE                reduce using rule 30 (member)
    IN                 reduce using rule 30 (member)
    LT                 reduce using rule 30 (member)
    LTE                reduce using rule 30 (member)
    NEQ                reduce using rule 30 (member)
    NIN                reduce using rule 30 (member)
    NRE                reduce using rule 30 (member)
    OPEN_BRACKET       reduce using rule 30 (member)
    RE                 reduce using rule 30 (member)

state 11 // OPEN_BRACKET INT [CLOSE_BRACKET]

   38 index: OPEN_BRACKET intExpr . CLOSE_BRACKET  // assoc %left, prec 4
   45 range: intExpr . COLON  // assoc %left, prec 5
   46 range: intExpr . COLON intExpr  // assoc %left, prec 5

    CLOSE_BRACKET  shift, and goto state 54
    COLON          shift, and goto state 55

state 12 // OPEN_BRACKET CLOSE_BRACKET

   39 index: OPEN_BRACKET CLOSE_BRACKET .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 4

    $end               reduce using rule 39 (index)
    CLOSE_BRACKET      reduce using rule 39 (index)
    CLOSE_PARENTHESIS  reduce using rule 39 (index)
    COMMA              reduce using rule 39 (index)
    DOT                reduce using rule 39 (index)
    DOTDOT             reduce using rule 39 (index)
    EQ                 reduce using rule 39 (index)
    GT                 reduce using rule 39 (index)
    GTE                reduce using rule 39 (index)
    IN                 reduce using rule 39 (index)
    LT                 reduce using rule 39 (index)
    LTE                reduce using rule 39 (index)
    NEQ                reduce using rule 39 (index)
    NIN                reduce using rule 39 (index)
    NRE                reduce using rule 39 (index)
    OPEN_BRACKET       reduce using rule 39 (index)
    RE                 reduce using rule 39 (index)

state 13 // OPEN_BRACKET COLON [CLOSE_BRACKET]

   40 selector: OPEN_BRACKET range . CLOSE_BRACKET  // assoc %left, prec 4

    CLOSE_BRACKET  shift, and goto state 53

state 14 // OPEN_BRACKET IDENTIFIER [CLOSE_BRACKET]

   41 selector: OPEN_BRACKET matchers . CLOSE_BRACKET  // assoc %left, prec 4
   48 matchers: matchers . COMMA matcher  // assoc %left, prec 5
   49 matchers: matchers . COMMA  // assoc %left, prec 5

    CLOSE_BRACKET  shift, and goto state 52
    COMMA          shift, and goto state 40

state 15 // OPEN_BRACKET COLON

   42 range: COLON .  [CLOSE_BRACKET]  // assoc %left, prec 5
   44 range: COLON . intExpr  // assoc %left, prec 5

    CLOSE_BRACKET  reduce using rule 42 (range)
    INT            shift, and goto state 21
    SUB            shift, and goto state 22

    intExpr  goto state 51

state 16 // OPEN_BRACKET MUL

   43 range: MUL .  [CLOSE_BRACKET]  // assoc %left, prec 2

    CLOSE_BRACKET  reduce using rule 43 (range)

state 17 // OPEN_BRACKET IDENTIFIER [CLOSE_BRACKET]

   47 matchers: matcher .  [CLOSE_BRACKET, COMMA]

    CLOSE_BRACKET  reduce using rule 47 (matchers)
    COMMA          reduce using rule 47 (matchers)

state 18 // OPEN_BRACKET AT [CLOSE_BRACKET]

   50 matcher: expr .  [CLOSE_BRACKET, COMMA]

    CLOSE_BRACKET  reduce using rule 50 (matcher)
    COMMA          reduce using rule 50 (matcher)

state 19 // OPEN_BRACKET IDENTIFIER [CLOSE_BRACKET]

   51 matcher: member .  [CLOSE_BRACKET, COMMA]

    CLOSE_BRACKET  reduce using rule 51 (matcher)
    COMMA          reduce using rule 51 (matcher)

state 20 // OPEN_BRACKET QUESTION

   52 matcher: QUESTION . OPEN_PARENTHESIS expr compairOp valExpr CLOSE_PARENTHESIS  // assoc %left, prec 4
   53 matcher: QUESTION . OPEN_PARENTHESIS expr includeOp OPEN_BRACKET matchers CLOSE_BRACKET CLOSE_PARENTHESIS  // assoc %left, prec 4

    OPEN_PARENTHESIS  shift, and goto state 24

state 21 // OPEN_BRACKET INT

   68 intExpr: INT .  [CLOSE_BRACKET, CLOSE_PARENTHESIS, COLON, COMMA]

    CLOSE_BRACKET      reduce using rule 68 (intExpr)
    CLOSE_PARENTHESIS  reduce using rule 68 (intExpr)
    COLON              reduce using rule 68 (intExpr)
    COMMA              reduce using rule 68 (intExpr)

state 22 // OPEN_BRACKET SUB

   69 intExpr: SUB . INT

    INT  shift, and goto state 23

state 23 // OPEN_BRACKET SUB INT

   69 intExpr: SUB INT .  [CLOSE_BRACKET, CLOSE_PARENTHESIS, COLON, COMMA]

    CLOSE_BRACKET      reduce using rule 69 (intExpr)
    CLOSE_PARENTHESIS  reduce using rule 69 (intExpr)
    COLON              reduce using rule 69 (intExpr)
    COMMA              reduce using rule 69 (intExpr)

state 24 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS

   52 matcher: QUESTION OPEN_PARENTHESIS . expr compairOp valExpr CLOSE_PARENTHESIS  // assoc %left, prec 4
   53 matcher: QUESTION OPEN_PARENTHESIS . expr includeOp OPEN_BRACKET matchers CLOSE_BRACKET CLOSE_PARENTHESIS  // assoc %left, prec 4

    AT            shift, and goto state 4
    DOLLAR        shift, and goto state 3
    OPEN_BRACKET  shift, and goto state 8

    expr        goto state 25
    index       goto state 6
    parentExpr  goto state 5
    selector    goto state 7

state 25 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT [EQ]

   52 matcher: QUESTION OPEN_PARENTHESIS expr . compairOp valExpr CLOSE_PARENTHESIS  // assoc %left, prec 4
   53 matcher: QUESTION OPEN_PARENTHESIS expr . includeOp OPEN_BRACKET matchers CLOSE_BRACKET CLOSE_PARENTHESIS  // assoc %left, prec 4

    EQ   shift, and goto state 28
    GT   shift, and goto state 30
    GTE  shift, and goto state 31
    IN   shift, and goto state 36
    LT   shift, and goto state 32
    LTE  shift, and goto state 33
    NEQ  shift, and goto state 29
    NIN  shift, and goto state 37
    NRE  shift, and goto state 35
    RE   shift, and goto state 34

    compairOp  goto state 26
    includeOp  goto state 27

state 26 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT EQ [AT]

   52 matcher: QUESTION OPEN_PARENTHESIS expr compairOp . valExpr CLOSE_PARENTHESIS  // assoc %left, prec 4

    AT            shift, and goto state 4
    DOLLAR        shift, and goto state 3
    FLOAT         shift, and goto state 46
    INT           shift, and goto state 21
    OPEN_BRACKET  shift, and goto state 8
    SUB           shift, and goto state 47

    expr        goto state 45
    index       goto state 6
    intExpr     goto state 48
    parentExpr  goto state 5
    selector    goto state 7
    valExpr     goto state 44

state 27 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT IN [OPEN_BRACKET]

   53 matcher: QUESTION OPEN_PARENTHESIS expr includeOp . OPEN_BRACKET matchers CLOSE_BRACKET CLOSE_PARENTHESIS  // assoc %left, prec 4

    OPEN_BRACKET  shift, and goto state 38

state 28 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT EQ

   58 compairOp: EQ .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 58 (compairOp)
    DOLLAR        reduce using rule 58 (compairOp)
    FLOAT         reduce using rule 58 (compairOp)
    INT           reduce using rule 58 (compairOp)
    OPEN_BRACKET  reduce using rule 58 (compairOp)
    SUB           reduce using rule 58 (compairOp)

state 29 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT NEQ

   59 compairOp: NEQ .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 59 (compairOp)
    DOLLAR        reduce using rule 59 (compairOp)
    FLOAT         reduce using rule 59 (compairOp)
    INT           reduce using rule 59 (compairOp)
    OPEN_BRACKET  reduce using rule 59 (compairOp)
    SUB           reduce using rule 59 (compairOp)

state 30 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT GT

   60 compairOp: GT .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 60 (compairOp)
    DOLLAR        reduce using rule 60 (compairOp)
    FLOAT         reduce using rule 60 (compairOp)
    INT           reduce using rule 60 (compairOp)
    OPEN_BRACKET  reduce using rule 60 (compairOp)
    SUB           reduce using rule 60 (compairOp)

state 31 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT GTE

   61 compairOp: GTE .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 61 (compairOp)
    DOLLAR        reduce using rule 61 (compairOp)
    FLOAT         reduce using rule 61 (compairOp)
    INT           reduce using rule 61 (compairOp)
    OPEN_BRACKET  reduce using rule 61 (compairOp)
    SUB           reduce using rule 61 (compairOp)

state 32 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT LT

   62 compairOp: LT .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 62 (compairOp)
    DOLLAR        reduce using rule 62 (compairOp)
    FLOAT         reduce using rule 62 (compairOp)
    INT           reduce using rule 62 (compairOp)
    OPEN_BRACKET  reduce using rule 62 (compairOp)
    SUB           reduce using rule 62 (compairOp)

state 33 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT LTE

   63 compairOp: LTE .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 63 (compairOp)
    DOLLAR        reduce using rule 63 (compairOp)
    FLOAT         reduce using rule 63 (compairOp)
    INT           reduce using rule 63 (compairOp)
    OPEN_BRACKET  reduce using rule 63 (compairOp)
    SUB           reduce using rule 63 (compairOp)

state 34 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT RE

   64 compairOp: RE .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 64 (compairOp)
    DOLLAR        reduce using rule 64 (compairOp)
    FLOAT         reduce using rule 64 (compairOp)
    INT           reduce using rule 64 (compairOp)
    OPEN_BRACKET  reduce using rule 64 (compairOp)
    SUB           reduce using rule 64 (compairOp)

state 35 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT NRE

   65 compairOp: NRE .  [AT, DOLLAR, FLOAT, INT, OPEN_BRACKET, SUB]  // assoc %left, prec 1

    AT            reduce using rule 65 (compairOp)
    DOLLAR        reduce using rule 65 (compairOp)
    FLOAT         reduce using rule 65 (compairOp)
    INT           reduce using rule 65 (compairOp)
    OPEN_BRACKET  reduce using rule 65 (compairOp)
    SUB           reduce using rule 65 (compairOp)

state 36 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT IN

   66 includeOp: IN .  [OPEN_BRACKET]  // assoc %left, prec 3

    OPEN_BRACKET  reduce using rule 66 (includeOp)

state 37 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT NIN

   67 includeOp: NIN .  [OPEN_BRACKET]  // assoc %left, prec 3

    OPEN_BRACKET  reduce using rule 67 (includeOp)

state 38 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT IN OPEN_BRACKET

   53 matcher: QUESTION OPEN_PARENTHESIS expr includeOp OPEN_BRACKET . matchers CLOSE_BRACKET CLOSE_PARENTHESIS  // assoc %left, prec 4

    AT            shift, and goto state 4
    DOLLAR        shift, and goto state 3
    IDENTIFIER    shift, and goto state 9
    OPEN_BRACKET  shift, and goto state 8
    QUESTION      shift, and goto state 20
    STRING        shift, and goto state 10

    expr        goto state 18
    index       goto state 6
    matcher     goto state 17
    matchers    goto state 39
    member      goto state 19
    parentExpr  goto state 5
    selector    goto state 7

state 39 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT IN OPEN_BRACKET IDENTIFIER [CLOSE_BRACKET]

   48 matchers: matchers . COMMA matcher  // assoc %left, prec 5
   49 matchers: matchers . COMMA  // assoc %left, prec 5
   53 matcher: QUESTION OPEN_PARENTHESIS expr includeOp OPEN_BRACKET matchers . CLOSE_BRACKET CLOSE_PARENTHESIS  // assoc %left, prec 4

    CLOSE_BRACKET  shift, and goto state 41
    COMMA          shift, and goto state 40

state 40 // OPEN_BRACKET IDENTIFIER COMMA

   48 matchers: matchers COMMA . matcher  // assoc %left, prec 5
   49 matchers: matchers COMMA .  [CLOSE_BRACKET, COMMA]  // assoc %left, prec 5

    AT             shift, and goto state 4
    CLOSE_BRACKET  reduce using rule 49 (matchers)
    COMMA          reduce using rule 49 (matchers)
    DOLLAR         shift, and goto state 3
    IDENTIFIER     shift, and goto state 9
    OPEN_BRACKET   shift, and goto state 8
    QUESTION       shift, and goto state 20
    STRING         shift, and goto state 10

    expr        goto state 18
    index       goto state 6
    matcher     goto state 43
    member      goto state 19
    parentExpr  goto state 5
    selector    goto state 7

state 41 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT IN OPEN_BRACKET IDENTIFIER CLOSE_BRACKET

   53 matcher: QUESTION OPEN_PARENTHESIS expr includeOp OPEN_BRACKET matchers CLOSE_BRACKET . CLOSE_PARENTHESIS  // assoc %left, prec 4

    CLOSE_PARENTHESIS  shift, and goto state 42

state 42 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT IN OPEN_BRACKET IDENTIFIER CLOSE_BRACKET CLOSE_PARENTHESIS

   53 matcher: QUESTION OPEN_PARENTHESIS expr includeOp OPEN_BRACKET matchers CLOSE_BRACKET CLOSE_PARENTHESIS .  [CLOSE_BRACKET, COMMA]  // assoc %left, prec 4

    CLOSE_BRACKET  reduce using rule 53 (matcher)
    COMMA          reduce using rule 53 (matcher)

state 43 // OPEN_BRACKET IDENTIFIER COMMA IDENTIFIER [CLOSE_BRACKET]

   48 matchers: matchers COMMA matcher .  [CLOSE_BRACKET, COMMA]  // assoc %left, prec 5

    CLOSE_BRACKET  reduce using rule 48 (matchers)
    COMMA          reduce using rule 48 (matchers)

state 44 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT EQ FLOAT [CLOSE_PARENTHESIS]

   52 matcher: QUESTION OPEN_PARENTHESIS expr compairOp valExpr . CLOSE_PARENTHESIS  // assoc %left, prec 4

    CLOSE_PARENTHESIS  shift, and goto state 50

state 45 // AT DOT IDENTIFIER OPEN_PARENTHESIS AT [CLOSE_PARENTHESIS]

   54 valExpr: expr .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 54 (valExpr)
    COMMA              reduce using rule 54 (valExpr)

state 46 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT

   55 valExpr: FLOAT .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 55 (valExpr)
    COMMA              reduce using rule 55 (valExpr)

state 47 // AT DOT IDENTIFIER OPEN_PARENTHESIS SUB

   56 valExpr: SUB . FLOAT
   69 intExpr: SUB . INT

    FLOAT  shift, and goto state 49
    INT    shift, and goto state 23

state 48 // AT DOT IDENTIFIER OPEN_PARENTHESIS INT [CLOSE_PARENTHESIS]

   57 valExpr: intExpr .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 57 (valExpr)
    COMMA              reduce using rule 57 (valExpr)

state 49 // AT DOT IDENTIFIER OPEN_PARENTHESIS SUB FLOAT

   56 valExpr: SUB FLOAT .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 56 (valExpr)
    COMMA              reduce using rule 56 (valExpr)

state 50 // OPEN_BRACKET QUESTION OPEN_PARENTHESIS AT EQ FLOAT CLOSE_PARENTHESIS

   52 matcher: QUESTION OPEN_PARENTHESIS expr compairOp valExpr CLOSE_PARENTHESIS .  [CLOSE_BRACKET, COMMA]  // assoc %left, prec 4

    CLOSE_BRACKET  reduce using rule 52 (matcher)
    COMMA          reduce using rule 52 (matcher)

state 51 // OPEN_BRACKET COLON INT [CLOSE_BRACKET]

   44 range: COLON intExpr .  [CLOSE_BRACKET]  // assoc %left, prec 5

    CLOSE_BRACKET  reduce using rule 44 (range)

state 52 // OPEN_BRACKET IDENTIFIER CLOSE_BRACKET

   41 selector: OPEN_BRACKET matchers CLOSE_BRACKET .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 4

    $end               reduce using rule 41 (selector)
    CLOSE_BRACKET      reduce using rule 41 (selector)
    CLOSE_PARENTHESIS  reduce using rule 41 (selector)
    COMMA              reduce using rule 41 (selector)
    DOT                reduce using rule 41 (selector)
    DOTDOT             reduce using rule 41 (selector)
    EQ                 reduce using rule 41 (selector)
    GT                 reduce using rule 41 (selector)
    GTE                reduce using rule 41 (selector)
    IN                 reduce using rule 41 (selector)
    LT                 reduce using rule 41 (selector)
    LTE                reduce using rule 41 (selector)
    NEQ                reduce using rule 41 (selector)
    NIN                reduce using rule 41 (selector)
    NRE                reduce using rule 41 (selector)
    OPEN_BRACKET       reduce using rule 41 (selector)
    RE                 reduce using rule 41 (selector)

state 53 // OPEN_BRACKET COLON CLOSE_BRACKET

   40 selector: OPEN_BRACKET range CLOSE_BRACKET .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 4

    $end               reduce using rule 40 (selector)
    CLOSE_BRACKET      reduce using rule 40 (selector)
    CLOSE_PARENTHESIS  reduce using rule 40 (selector)
    COMMA              reduce using rule 40 (selector)
    DOT                reduce using rule 40 (selector)
    DOTDOT             reduce using rule 40 (selector)
    EQ                 reduce using rule 40 (selector)
    GT                 reduce using rule 40 (selector)
    GTE                reduce using rule 40 (selector)
    IN                 reduce using rule 40 (selector)
    LT                 reduce using rule 40 (selector)
    LTE                reduce using rule 40 (selector)
    NEQ                reduce using rule 40 (selector)
    NIN                reduce using rule 40 (selector)
    NRE                reduce using rule 40 (selector)
    OPEN_BRACKET       reduce using rule 40 (selector)
    RE                 reduce using rule 40 (selector)

state 54 // OPEN_BRACKET INT CLOSE_BRACKET

   38 index: OPEN_BRACKET intExpr CLOSE_BRACKET .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 4

    $end               reduce using rule 38 (index)
    CLOSE_BRACKET      reduce using rule 38 (index)
    CLOSE_PARENTHESIS  reduce using rule 38 (index)
    COMMA              reduce using rule 38 (index)
    DOT                reduce using rule 38 (index)
    DOTDOT             reduce using rule 38 (index)
    EQ                 reduce using rule 38 (index)
    GT                 reduce using rule 38 (index)
    GTE                reduce using rule 38 (index)
    IN                 reduce using rule 38 (index)
    LT                 reduce using rule 38 (index)
    LTE                reduce using rule 38 (index)
    NEQ                reduce using rule 38 (index)
    NIN                reduce using rule 38 (index)
    NRE                reduce using rule 38 (index)
    OPEN_BRACKET       reduce using rule 38 (index)
    RE                 reduce using rule 38 (index)

state 55 // OPEN_BRACKET INT COLON

   45 range: intExpr COLON .  [CLOSE_BRACKET]  // assoc %left, prec 5
   46 range: intExpr COLON . intExpr  // assoc %left, prec 5

    CLOSE_BRACKET  reduce using rule 45 (range)
    INT            shift, and goto state 21
    SUB            shift, and goto state 22

    intExpr  goto state 56

state 56 // OPEN_BRACKET INT COLON INT [CLOSE_BRACKET]

   46 range: intExpr COLON intExpr .  [CLOSE_BRACKET]  // assoc %left, prec 5

    CLOSE_BRACKET  reduce using rule 46 (range)

state 57 // AT OPEN_BRACKET CLOSE_BRACKET [$end]

    7 expr: AT index .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5

    $end               reduce using rule 7 (expr)
    CLOSE_BRACKET      reduce using rule 7 (expr)
    CLOSE_PARENTHESIS  reduce using rule 7 (expr)
    COMMA              reduce using rule 7 (expr)
    EQ                 reduce using rule 7 (expr)
    GT                 reduce using rule 7 (expr)
    GTE                reduce using rule 7 (expr)
    IN                 reduce using rule 7 (expr)
    LT                 reduce using rule 7 (expr)
    LTE                reduce using rule 7 (expr)
    NEQ                reduce using rule 7 (expr)
    NIN                reduce using rule 7 (expr)
    NRE                reduce using rule 7 (expr)
    RE                 reduce using rule 7 (expr)

state 58 // AT DOT

    8 expr: AT DOT . segment  // assoc %left, prec 5
   13 expr: AT DOT . callExpr  // assoc %left, prec 5

    IDENTIFIER    shift, and goto state 80
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    callExpr  goto state 95
    index     goto state 70
    member    goto state 69
    segment   goto state 94
    selector  goto state 71

state 59 // AT DOTDOT

    9 expr: AT DOTDOT . segment  // assoc %left, prec 5

    IDENTIFIER    shift, and goto state 9
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    index     goto state 70
    member    goto state 69
    segment   goto state 93
    selector  goto state 71

state 60 // AT AT

   14 parentExpr: AT AT .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   15 parentExpr: AT AT . index  // assoc %left, prec 5
   16 parentExpr: AT AT . DOT segment  // assoc %left, prec 5
   17 parentExpr: AT AT . DOTDOT segment  // assoc %left, prec 5
   18 parentExpr: AT AT . DOT parentExpr  // assoc %left, prec 5
   19 parentExpr: AT AT . DOTDOT parentExpr  // assoc %left, prec 5

    $end               reduce using rule 14 (parentExpr)
    CLOSE_BRACKET      reduce using rule 14 (parentExpr)
    CLOSE_PARENTHESIS  reduce using rule 14 (parentExpr)
    COMMA              reduce using rule 14 (parentExpr)
    DOT                shift, and goto state 64
    DOTDOT             shift, and goto state 65
    EQ                 reduce using rule 14 (parentExpr)
    GT                 reduce using rule 14 (parentExpr)
    GTE                reduce using rule 14 (parentExpr)
    IN                 reduce using rule 14 (parentExpr)
    LT                 reduce using rule 14 (parentExpr)
    LTE                reduce using rule 14 (parentExpr)
    NEQ                reduce using rule 14 (parentExpr)
    NIN                reduce using rule 14 (parentExpr)
    NRE                reduce using rule 14 (parentExpr)
    OPEN_BRACKET       shift, and goto state 61
    RE                 reduce using rule 14 (parentExpr)

    index  goto state 63

state 61 // DOLLAR OPEN_BRACKET

   38 index: OPEN_BRACKET . intExpr CLOSE_BRACKET  // assoc %left, prec 4
   39 index: OPEN_BRACKET . CLOSE_BRACKET  // assoc %left, prec 4

    CLOSE_BRACKET  shift, and goto state 12
    INT            shift, and goto state 21
    SUB            shift, and goto state 22

    intExpr  goto state 62

state 62 // DOLLAR OPEN_BRACKET INT [CLOSE_BRACKET]

   38 index: OPEN_BRACKET intExpr . CLOSE_BRACKET  // assoc %left, prec 4

    CLOSE_BRACKET  shift, and goto state 54

state 63 // AT AT OPEN_BRACKET CLOSE_BRACKET [$end]

   15 parentExpr: AT AT index .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5

    $end               reduce using rule 15 (parentExpr)
    CLOSE_BRACKET      reduce using rule 15 (parentExpr)
    CLOSE_PARENTHESIS  reduce using rule 15 (parentExpr)
    COMMA              reduce using rule 15 (parentExpr)
    EQ                 reduce using rule 15 (parentExpr)
    GT                 reduce using rule 15 (parentExpr)
    GTE                reduce using rule 15 (parentExpr)
    IN                 reduce using rule 15 (parentExpr)
    LT                 reduce using rule 15 (parentExpr)
    LTE                reduce using rule 15 (parentExpr)
    NEQ                reduce using rule 15 (parentExpr)
    NIN                reduce using rule 15 (parentExpr)
    NRE                reduce using rule 15 (parentExpr)
    RE                 reduce using rule 15 (parentExpr)

state 64 // AT AT DOT

   16 parentExpr: AT AT DOT . segment  // assoc %left, prec 5
   18 parentExpr: AT AT DOT . parentExpr  // assoc %left, prec 5

    AT            shift, and goto state 66
    IDENTIFIER    shift, and goto state 9
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    index       goto state 70
    member      goto state 69
    parentExpr  goto state 92
    segment     goto state 91
    selector    goto state 71

state 65 // AT AT DOTDOT

   17 parentExpr: AT AT DOTDOT . segment  // assoc %left, prec 5
   19 parentExpr: AT AT DOTDOT . parentExpr  // assoc %left, prec 5

    AT            shift, and goto state 66
    IDENTIFIER    shift, and goto state 9
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    index       goto state 70
    member      goto state 69
    parentExpr  goto state 68
    segment     goto state 67
    selector    goto state 71

state 66 // AT AT DOTDOT AT

   14 parentExpr: AT . AT  // assoc %left, prec 5
   15 parentExpr: AT . AT index  // assoc %left, prec 5
   16 parentExpr: AT . AT DOT segment  // assoc %left, prec 5
   17 parentExpr: AT . AT DOTDOT segment  // assoc %left, prec 5
   18 parentExpr: AT . AT DOT parentExpr  // assoc %left, prec 5
   19 parentExpr: AT . AT DOTDOT parentExpr  // assoc %left, prec 5

    AT  shift, and goto state 60

state 67 // AT AT DOTDOT IDENTIFIER [$end]

   17 parentExpr: AT AT DOTDOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 17 (parentExpr)
    CLOSE_BRACKET      reduce using rule 17 (parentExpr)
    CLOSE_PARENTHESIS  reduce using rule 17 (parentExpr)
    COMMA              reduce using rule 17 (parentExpr)
    DOT                shift, and goto state 75
    DOTDOT             shift, and goto state 76
    EQ                 reduce using rule 17 (parentExpr)
    GT                 reduce using rule 17 (parentExpr)
    GTE                reduce using rule 17 (parentExpr)
    IN                 reduce using rule 17 (parentExpr)
    LT                 reduce using rule 17 (parentExpr)
    LTE                reduce using rule 17 (parentExpr)
    NEQ                reduce using rule 17 (parentExpr)
    NIN                reduce using rule 17 (parentExpr)
    NRE                reduce using rule 17 (parentExpr)
    OPEN_BRACKET       shift, and goto state 8
    RE                 reduce using rule 17 (parentExpr)

    index     goto state 73
    selector  goto state 74

state 68 // AT AT DOTDOT AT AT [$end]

   19 parentExpr: AT AT DOTDOT parentExpr .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5

    $end               reduce using rule 19 (parentExpr)
    CLOSE_BRACKET      reduce using rule 19 (parentExpr)
    CLOSE_PARENTHESIS  reduce using rule 19 (parentExpr)
    COMMA              reduce using rule 19 (parentExpr)
    EQ                 reduce using rule 19 (parentExpr)
    GT                 reduce using rule 19 (parentExpr)
    GTE                reduce using rule 19 (parentExpr)
    IN                 reduce using rule 19 (parentExpr)
    LT                 reduce using rule 19 (parentExpr)
    LTE                reduce using rule 19 (parentExpr)
    NEQ                reduce using rule 19 (parentExpr)
    NIN                reduce using rule 19 (parentExpr)
    NRE                reduce using rule 19 (parentExpr)
    RE                 reduce using rule 19 (parentExpr)

state 69 // AT DOTDOT IDENTIFIER [$end]

   20 segment: member .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 20 (segment)
    CLOSE_BRACKET      reduce using rule 20 (segment)
    CLOSE_PARENTHESIS  reduce using rule 20 (segment)
    COMMA              reduce using rule 20 (segment)
    DOT                reduce using rule 20 (segment)
    DOTDOT             reduce using rule 20 (segment)
    EQ                 reduce using rule 20 (segment)
    GT                 reduce using rule 20 (segment)
    GTE                reduce using rule 20 (segment)
    IN                 reduce using rule 20 (segment)
    LT                 reduce using rule 20 (segment)
    LTE                reduce using rule 20 (segment)
    NEQ                reduce using rule 20 (segment)
    NIN                reduce using rule 20 (segment)
    NRE                reduce using rule 20 (segment)
    OPEN_BRACKET       reduce using rule 20 (segment)
    RE                 reduce using rule 20 (segment)

state 70 // AT DOT OPEN_BRACKET CLOSE_BRACKET [$end]

   21 segment: index .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 21 (segment)
    CLOSE_BRACKET      reduce using rule 21 (segment)
    CLOSE_PARENTHESIS  reduce using rule 21 (segment)
    COMMA              reduce using rule 21 (segment)
    DOT                reduce using rule 21 (segment)
    DOTDOT             reduce using rule 21 (segment)
    EQ                 reduce using rule 21 (segment)
    GT                 reduce using rule 21 (segment)
    GTE                reduce using rule 21 (segment)
    IN                 reduce using rule 21 (segment)
    LT                 reduce using rule 21 (segment)
    LTE                reduce using rule 21 (segment)
    NEQ                reduce using rule 21 (segment)
    NIN                reduce using rule 21 (segment)
    NRE                reduce using rule 21 (segment)
    OPEN_BRACKET       reduce using rule 21 (segment)
    RE                 reduce using rule 21 (segment)

state 71 // AT DOT OPEN_BRACKET COLON CLOSE_BRACKET [$end]

   22 segment: selector .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 22 (segment)
    CLOSE_BRACKET      reduce using rule 22 (segment)
    CLOSE_PARENTHESIS  reduce using rule 22 (segment)
    COMMA              reduce using rule 22 (segment)
    DOT                reduce using rule 22 (segment)
    DOTDOT             reduce using rule 22 (segment)
    EQ                 reduce using rule 22 (segment)
    GT                 reduce using rule 22 (segment)
    GTE                reduce using rule 22 (segment)
    IN                 reduce using rule 22 (segment)
    LT                 reduce using rule 22 (segment)
    LTE                reduce using rule 22 (segment)
    NEQ                reduce using rule 22 (segment)
    NIN                reduce using rule 22 (segment)
    NRE                reduce using rule 22 (segment)
    OPEN_BRACKET       reduce using rule 22 (segment)
    RE                 reduce using rule 22 (segment)

state 72 // AT DOTDOT MUL

   23 segment: MUL .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 2

    $end               reduce using rule 23 (segment)
    CLOSE_BRACKET      reduce using rule 23 (segment)
    CLOSE_PARENTHESIS  reduce using rule 23 (segment)
    COMMA              reduce using rule 23 (segment)
    DOT                reduce using rule 23 (segment)
    DOTDOT             reduce using rule 23 (segment)
    EQ                 reduce using rule 23 (segment)
    GT                 reduce using rule 23 (segment)
    GTE                reduce using rule 23 (segment)
    IN                 reduce using rule 23 (segment)
    LT                 reduce using rule 23 (segment)
    LTE                reduce using rule 23 (segment)
    NEQ                reduce using rule 23 (segment)
    NIN                reduce using rule 23 (segment)
    NRE                reduce using rule 23 (segment)
    OPEN_BRACKET       reduce using rule 23 (segment)
    RE                 reduce using rule 23 (segment)

state 73 // DOLLAR DOT IDENTIFIER OPEN_BRACKET CLOSE_BRACKET [$end]

   24 segment: segment index .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 24 (segment)
    CLOSE_BRACKET      reduce using rule 24 (segment)
    CLOSE_PARENTHESIS  reduce using rule 24 (segment)
    COMMA              reduce using rule 24 (segment)
    DOT                reduce using rule 24 (segment)
    DOTDOT             reduce using rule 24 (segment)
    EQ                 reduce using rule 24 (segment)
    GT                 reduce using rule 24 (segment)
    GTE                reduce using rule 24 (segment)
    IN                 reduce using rule 24 (segment)
    LT                 reduce using rule 24 (segment)
    LTE                reduce using rule 24 (segment)
    NEQ                reduce using rule 24 (segment)
    NIN                reduce using rule 24 (segment)
    NRE                reduce using rule 24 (segment)
    OPEN_BRACKET       reduce using rule 24 (segment)
    RE                 reduce using rule 24 (segment)

state 74 // AT DOTDOT IDENTIFIER OPEN_BRACKET COLON CLOSE_BRACKET [$end]

   25 segment: segment selector .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]

    $end               reduce using rule 25 (segment)
    CLOSE_BRACKET      reduce using rule 25 (segment)
    CLOSE_PARENTHESIS  reduce using rule 25 (segment)
    COMMA              reduce using rule 25 (segment)
    DOT                reduce using rule 25 (segment)
    DOTDOT             reduce using rule 25 (segment)
    EQ                 reduce using rule 25 (segment)
    GT                 reduce using rule 25 (segment)
    GTE                reduce using rule 25 (segment)
    IN                 reduce using rule 25 (segment)
    LT                 reduce using rule 25 (segment)
    LTE                reduce using rule 25 (segment)
    NEQ                reduce using rule 25 (segment)
    NIN                reduce using rule 25 (segment)
    NRE                reduce using rule 25 (segment)
    OPEN_BRACKET       reduce using rule 25 (segment)
    RE                 reduce using rule 25 (segment)

state 75 // AT DOT IDENTIFIER DOT

   26 segment: segment DOT . segment  // assoc %left, prec 5
   28 segment: segment DOT . callExpr  // assoc %left, prec 5

    IDENTIFIER    shift, and goto state 80
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    callExpr  goto state 79
    index     goto state 70
    member    goto state 69
    segment   goto state 78
    selector  goto state 71

state 76 // AT DOT IDENTIFIER DOTDOT

   27 segment: segment DOTDOT . segment  // assoc %left, prec 5

    IDENTIFIER    shift, and goto state 9
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    index     goto state 70
    member    goto state 69
    segment   goto state 77
    selector  goto state 71

state 77 // AT DOT IDENTIFIER DOTDOT IDENTIFIER [$end]

   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   27 segment: segment DOTDOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 27 (segment)
    CLOSE_BRACKET      reduce using rule 27 (segment)
    CLOSE_PARENTHESIS  reduce using rule 27 (segment)
    COMMA              reduce using rule 27 (segment)
    DOT                reduce using rule 27 (segment)
    DOTDOT             reduce using rule 27 (segment)
    EQ                 reduce using rule 27 (segment)
    GT                 reduce using rule 27 (segment)
    GTE                reduce using rule 27 (segment)
    IN                 reduce using rule 27 (segment)
    LT                 reduce using rule 27 (segment)
    LTE                reduce using rule 27 (segment)
    NEQ                reduce using rule 27 (segment)
    NIN                reduce using rule 27 (segment)
    NRE                reduce using rule 27 (segment)
    OPEN_BRACKET       reduce using rule 27 (segment)
    RE                 reduce using rule 27 (segment)

    index     goto state 73
    selector  goto state 74

state 78 // AT DOT IDENTIFIER DOT IDENTIFIER [$end]

   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   26 segment: segment DOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 26 (segment)
    CLOSE_BRACKET      reduce using rule 26 (segment)
    CLOSE_PARENTHESIS  reduce using rule 26 (segment)
    COMMA              reduce using rule 26 (segment)
    DOT                reduce using rule 26 (segment)
    DOTDOT             reduce using rule 26 (segment)
    EQ                 reduce using rule 26 (segment)
    GT                 reduce using rule 26 (segment)
    GTE                reduce using rule 26 (segment)
    IN                 reduce using rule 26 (segment)
    LT                 reduce using rule 26 (segment)
    LTE                reduce using rule 26 (segment)
    NEQ                reduce using rule 26 (segment)
    NIN                reduce using rule 26 (segment)
    NRE                reduce using rule 26 (segment)
    OPEN_BRACKET       reduce using rule 26 (segment)
    RE                 reduce using rule 26 (segment)

    index     goto state 73
    selector  goto state 74

state 79 // AT DOT IDENTIFIER DOT IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS [$end]

   28 segment: segment DOT callExpr .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 5

    $end               reduce using rule 28 (segment)
    CLOSE_BRACKET      reduce using rule 28 (segment)
    CLOSE_PARENTHESIS  reduce using rule 28 (segment)
    COMMA              reduce using rule 28 (segment)
    DOT                reduce using rule 28 (segment)
    DOTDOT             reduce using rule 28 (segment)
    EQ                 reduce using rule 28 (segment)
    GT                 reduce using rule 28 (segment)
    GTE                reduce using rule 28 (segment)
    IN                 reduce using rule 28 (segment)
    LT                 reduce using rule 28 (segment)
    LTE                reduce using rule 28 (segment)
    NEQ                reduce using rule 28 (segment)
    NIN                reduce using rule 28 (segment)
    NRE                reduce using rule 28 (segment)
    OPEN_BRACKET       reduce using rule 28 (segment)
    RE                 reduce using rule 28 (segment)

state 80 // AT DOT IDENTIFIER

   29 member: IDENTIFIER .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]
   31 callExpr: IDENTIFIER . OPEN_PARENTHESIS callArgsExpr CLOSE_PARENTHESIS  // assoc %left, prec 4
   32 callExpr: IDENTIFIER . OPEN_PARENTHESIS CLOSE_PARENTHESIS  // assoc %left, prec 4

    $end               reduce using rule 29 (member)
    CLOSE_BRACKET      reduce using rule 29 (member)
    CLOSE_PARENTHESIS  reduce using rule 29 (member)
    COMMA              reduce using rule 29 (member)
    DOT                reduce using rule 29 (member)
    DOTDOT             reduce using rule 29 (member)
    EQ                 reduce using rule 29 (member)
    GT                 reduce using rule 29 (member)
    GTE                reduce using rule 29 (member)
    IN                 reduce using rule 29 (member)
    LT                 reduce using rule 29 (member)
    LTE                reduce using rule 29 (member)
    NEQ                reduce using rule 29 (member)
    NIN                reduce using rule 29 (member)
    NRE                reduce using rule 29 (member)
    OPEN_BRACKET       reduce using rule 29 (member)
    OPEN_PARENTHESIS   shift, and goto state 81
    RE                 reduce using rule 29 (member)

state 81 // AT DOT IDENTIFIER OPEN_PARENTHESIS

   31 callExpr: IDENTIFIER OPEN_PARENTHESIS . callArgsExpr CLOSE_PARENTHESIS  // assoc %left, prec 4
   32 callExpr: IDENTIFIER OPEN_PARENTHESIS . CLOSE_PARENTHESIS  // assoc %left, prec 4

    AT                 shift, and goto state 4
    CLOSE_PARENTHESIS  shift, and goto state 83
    DOLLAR             shift, and goto state 3
    FLOAT              shift, and goto state 46
    INT                shift, and goto state 21
    OPEN_BRACKET       shift, and goto state 8
    SUB                shift, and goto state 47

    callArgsExpr  goto state 82
    expr          goto state 45
    index         goto state 6
    intExpr       goto state 48
    parentExpr    goto state 5
    selector      goto state 7
    valExpr       goto state 84

state 82 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT [CLOSE_PARENTHESIS]

   31 callExpr: IDENTIFIER OPEN_PARENTHESIS callArgsExpr . CLOSE_PARENTHESIS  // assoc %left, prec 4
   34 callArgsExpr: callArgsExpr . COMMA valExpr  // assoc %left, prec 5
   35 callArgsExpr: callArgsExpr . COMMA STRING
   36 callArgsExpr: callArgsExpr . COMMA TRUE
   37 callArgsExpr: callArgsExpr . COMMA FALSE

    CLOSE_PARENTHESIS  shift, and goto state 85
    COMMA              shift, and goto state 86

state 83 // AT DOT IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS

   32 callExpr: IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 4

    $end               reduce using rule 32 (callExpr)
    CLOSE_BRACKET      reduce using rule 32 (callExpr)
    CLOSE_PARENTHESIS  reduce using rule 32 (callExpr)
    COMMA              reduce using rule 32 (callExpr)
    DOT                reduce using rule 32 (callExpr)
    DOTDOT             reduce using rule 32 (callExpr)
    EQ                 reduce using rule 32 (callExpr)
    GT                 reduce using rule 32 (callExpr)
    GTE                reduce using rule 32 (callExpr)
    IN                 reduce using rule 32 (callExpr)
    LT                 reduce using rule 32 (callExpr)
    LTE                reduce using rule 32 (callExpr)
    NEQ                reduce using rule 32 (callExpr)
    NIN                reduce using rule 32 (callExpr)
    NRE                reduce using rule 32 (callExpr)
    OPEN_BRACKET       reduce using rule 32 (callExpr)
    RE                 reduce using rule 32 (callExpr)

state 84 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT [CLOSE_PARENTHESIS]

   33 callArgsExpr: valExpr .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 33 (callArgsExpr)
    COMMA              reduce using rule 33 (callArgsExpr)

state 85 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT CLOSE_PARENTHESIS

   31 callExpr: IDENTIFIER OPEN_PARENTHESIS callArgsExpr CLOSE_PARENTHESIS .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, DOT, DOTDOT, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, OPEN_BRACKET, RE]  // assoc %left, prec 4

    $end               reduce using rule 31 (callExpr)
    CLOSE_BRACKET      reduce using rule 31 (callExpr)
    CLOSE_PARENTHESIS  reduce using rule 31 (callExpr)
    COMMA              reduce using rule 31 (callExpr)
    DOT                reduce using rule 31 (callExpr)
    DOTDOT             reduce using rule 31 (callExpr)
    EQ                 reduce using rule 31 (callExpr)
    GT                 reduce using rule 31 (callExpr)
    GTE                reduce using rule 31 (callExpr)
    IN                 reduce using rule 31 (callExpr)
    LT                 reduce using rule 31 (callExpr)
    LTE                reduce using rule 31 (callExpr)
    NEQ                reduce using rule 31 (callExpr)
    NIN                reduce using rule 31 (callExpr)
    NRE                reduce using rule 31 (callExpr)
    OPEN_BRACKET       reduce using rule 31 (callExpr)
    RE                 reduce using rule 31 (callExpr)

state 86 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT COMMA

   34 callArgsExpr: callArgsExpr COMMA . valExpr  // assoc %left, prec 5
   35 callArgsExpr: callArgsExpr COMMA . STRING
   36 callArgsExpr: callArgsExpr COMMA . TRUE
   37 callArgsExpr: callArgsExpr COMMA . FALSE

    AT            shift, and goto state 4
    DOLLAR        shift, and goto state 3
    FALSE         shift, and goto state 90
    FLOAT         shift, and goto state 46
    INT           shift, and goto state 21
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 88
    SUB           shift, and goto state 47
    TRUE          shift, and goto state 89

    expr        goto state 45
    index       goto state 6
    intExpr     goto state 48
    parentExpr  goto state 5
    selector    goto state 7
    valExpr     goto state 87

state 87 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT COMMA FLOAT [CLOSE_PARENTHESIS]

   34 callArgsExpr: callArgsExpr COMMA valExpr .  [CLOSE_PARENTHESIS, COMMA]  // assoc %left, prec 5

    CLOSE_PARENTHESIS  reduce using rule 34 (callArgsExpr)
    COMMA              reduce using rule 34 (callArgsExpr)

state 88 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT COMMA STRING

   35 callArgsExpr: callArgsExpr COMMA STRING .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 35 (callArgsExpr)
    COMMA              reduce using rule 35 (callArgsExpr)

state 89 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT COMMA TRUE

   36 callArgsExpr: callArgsExpr COMMA TRUE .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 36 (callArgsExpr)
    COMMA              reduce using rule 36 (callArgsExpr)

state 90 // AT DOT IDENTIFIER OPEN_PARENTHESIS FLOAT COMMA FALSE

   37 callArgsExpr: callArgsExpr COMMA FALSE .  [CLOSE_PARENTHESIS, COMMA]

    CLOSE_PARENTHESIS  reduce using rule 37 (callArgsExpr)
    COMMA              reduce using rule 37 (callArgsExpr)

state 91 // AT AT DOT IDENTIFIER [$end]

   16 parentExpr: AT AT DOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 16 (parentExpr)
    CLOSE_BRACKET      reduce using rule 16 (parentExpr)
    CLOSE_PARENTHESIS  reduce using rule 16 (parentExpr)
    COMMA              reduce using rule 16 (parentExpr)
    DOT                shift, and goto state 75
    DOTDOT             shift, and goto state 76
    EQ                 reduce using rule 16 (parentExpr)
    GT                 reduce using rule 16 (parentExpr)
    GTE                reduce using rule 16 (parentExpr)
    IN                 reduce using rule 16 (parentExpr)
    LT                 reduce using rule 16 (parentExpr)
    LTE                reduce using rule 16 (parentExpr)
    NEQ                reduce using rule 16 (parentExpr)
    NIN                reduce using rule 16 (parentExpr)
    NRE                reduce using rule 16 (parentExpr)
    OPEN_BRACKET       shift, and goto state 8
    RE                 reduce using rule 16 (parentExpr)

    index     goto state 73
    selector  goto state 74

state 92 // AT AT DOT AT AT [$end]

   18 parentExpr: AT AT DOT parentExpr .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5

    $end               reduce using rule 18 (parentExpr)
    CLOSE_BRACKET      reduce using rule 18 (parentExpr)
    CLOSE_PARENTHESIS  reduce using rule 18 (parentExpr)
    COMMA              reduce using rule 18 (parentExpr)
    EQ                 reduce using rule 18 (parentExpr)
    GT                 reduce using rule 18 (parentExpr)
    GTE                reduce using rule 18 (parentExpr)
    IN                 reduce using rule 18 (parentExpr)
    LT                 reduce using rule 18 (parentExpr)
    LTE                reduce using rule 18 (parentExpr)
    NEQ                reduce using rule 18 (parentExpr)
    NIN                reduce using rule 18 (parentExpr)
    NRE                reduce using rule 18 (parentExpr)
    RE                 reduce using rule 18 (parentExpr)

state 93 // AT DOTDOT IDENTIFIER [$end]

    9 expr: AT DOTDOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 9 (expr)
    CLOSE_BRACKET      reduce using rule 9 (expr)
    CLOSE_PARENTHESIS  reduce using rule 9 (expr)
    COMMA              reduce using rule 9 (expr)
    DOT                shift, and goto state 75
    DOTDOT             shift, and goto state 76
    EQ                 reduce using rule 9 (expr)
    GT                 reduce using rule 9 (expr)
    GTE                reduce using rule 9 (expr)
    IN                 reduce using rule 9 (expr)
    LT                 reduce using rule 9 (expr)
    LTE                reduce using rule 9 (expr)
    NEQ                reduce using rule 9 (expr)
    NIN                reduce using rule 9 (expr)
    NRE                reduce using rule 9 (expr)
    OPEN_BRACKET       shift, and goto state 8
    RE                 reduce using rule 9 (expr)

    index     goto state 73
    selector  goto state 74

state 94 // AT DOT IDENTIFIER [$end]

    8 expr: AT DOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 8 (expr)
    CLOSE_BRACKET      reduce using rule 8 (expr)
    CLOSE_PARENTHESIS  reduce using rule 8 (expr)
    COMMA              reduce using rule 8 (expr)
    DOT                shift, and goto state 75
    DOTDOT             shift, and goto state 76
    EQ                 reduce using rule 8 (expr)
    GT                 reduce using rule 8 (expr)
    GTE                reduce using rule 8 (expr)
    IN                 reduce using rule 8 (expr)
    LT                 reduce using rule 8 (expr)
    LTE                reduce using rule 8 (expr)
    NEQ                reduce using rule 8 (expr)
    NIN                reduce using rule 8 (expr)
    NRE                reduce using rule 8 (expr)
    OPEN_BRACKET       shift, and goto state 8
    RE                 reduce using rule 8 (expr)

    index     goto state 73
    selector  goto state 74

state 95 // AT DOT IDENTIFIER OPEN_PARENTHESIS CLOSE_PARENTHESIS [$end]

   13 expr: AT DOT callExpr .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5

    $end               reduce using rule 13 (expr)
    CLOSE_BRACKET      reduce using rule 13 (expr)
    CLOSE_PARENTHESIS  reduce using rule 13 (expr)
    COMMA              reduce using rule 13 (expr)
    EQ                 reduce using rule 13 (expr)
    GT                 reduce using rule 13 (expr)
    GTE                reduce using rule 13 (expr)
    IN                 reduce using rule 13 (expr)
    LT                 reduce using rule 13 (expr)
    LTE                reduce using rule 13 (expr)
    NEQ                reduce using rule 13 (expr)
    NIN                reduce using rule 13 (expr)
    NRE                reduce using rule 13 (expr)
    RE                 reduce using rule 13 (expr)

state 96 // DOLLAR OPEN_BRACKET CLOSE_BRACKET [$end]

    3 expr: DOLLAR index .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5

    $end               reduce using rule 3 (expr)
    CLOSE_BRACKET      reduce using rule 3 (expr)
    CLOSE_PARENTHESIS  reduce using rule 3 (expr)
    COMMA              reduce using rule 3 (expr)
    EQ                 reduce using rule 3 (expr)
    GT                 reduce using rule 3 (expr)
    GTE                reduce using rule 3 (expr)
    IN                 reduce using rule 3 (expr)
    LT                 reduce using rule 3 (expr)
    LTE                reduce using rule 3 (expr)
    NEQ                reduce using rule 3 (expr)
    NIN                reduce using rule 3 (expr)
    NRE                reduce using rule 3 (expr)
    RE                 reduce using rule 3 (expr)

state 97 // DOLLAR DOT

    4 expr: DOLLAR DOT . segment  // assoc %left, prec 5

    IDENTIFIER    shift, and goto state 9
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    index     goto state 70
    member    goto state 69
    segment   goto state 100
    selector  goto state 71

state 98 // DOLLAR DOTDOT

    5 expr: DOLLAR DOTDOT . segment  // assoc %left, prec 5

    IDENTIFIER    shift, and goto state 9
    MUL           shift, and goto state 72
    OPEN_BRACKET  shift, and goto state 8
    STRING        shift, and goto state 10

    index     goto state 70
    member    goto state 69
    segment   goto state 99
    selector  goto state 71

state 99 // DOLLAR DOTDOT IDENTIFIER [$end]

    5 expr: DOLLAR DOTDOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 5 (expr)
    CLOSE_BRACKET      reduce using rule 5 (expr)
    CLOSE_PARENTHESIS  reduce using rule 5 (expr)
    COMMA              reduce using rule 5 (expr)
    DOT                shift, and goto state 75
    DOTDOT             shift, and goto state 76
    EQ                 reduce using rule 5 (expr)
    GT                 reduce using rule 5 (expr)
    GTE                reduce using rule 5 (expr)
    IN                 reduce using rule 5 (expr)
    LT                 reduce using rule 5 (expr)
    LTE                reduce using rule 5 (expr)
    NEQ                reduce using rule 5 (expr)
    NIN                reduce using rule 5 (expr)
    NRE                reduce using rule 5 (expr)
    OPEN_BRACKET       shift, and goto state 8
    RE                 reduce using rule 5 (expr)

    index     goto state 73
    selector  goto state 74

state 100 // DOLLAR DOT IDENTIFIER [$end]

    4 expr: DOLLAR DOT segment .  [$end, CLOSE_BRACKET, CLOSE_PARENTHESIS, COMMA, EQ, GT, GTE, IN, LT, LTE, NEQ, NIN, NRE, RE]  // assoc %left, prec 5
   24 segment: segment . index
   25 segment: segment . selector
   26 segment: segment . DOT segment  // assoc %left, prec 5
   27 segment: segment . DOTDOT segment  // assoc %left, prec 5
   28 segment: segment . DOT callExpr  // assoc %left, prec 5

    $end               reduce using rule 4 (expr)
    CLOSE_BRACKET      reduce using rule 4 (expr)
    CLOSE_PARENTHESIS  reduce using rule 4 (expr)
    COMMA              reduce using rule 4 (expr)
    DOT                shift, and goto state 75
    DOTDOT             shift, and goto state 76
    EQ                 reduce using rule 4 (expr)
    GT                 reduce using rule 4 (expr)
    GTE                reduce using rule 4 (expr)
    IN                 reduce using rule 4 (expr)
    LT                 reduce using rule 4 (expr)
    LTE                reduce using rule 4 (expr)
    NEQ                reduce using rule 4 (expr)
    NIN                reduce using rule 4 (expr)
    NRE                reduce using rule 4 (expr)
    OPEN_BRACKET       shift, and goto state 8
    RE                 reduce using rule 4 (expr)

    index     goto state 73
    selector  goto state 74

