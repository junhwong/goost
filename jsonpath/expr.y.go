// Code generated by goyacc - DO NOT EDIT.

package jsonpath

import __yyfmt__ "fmt"

type yySymType struct {
	yys           int
	Expr          Expr
	FilterExpr    FilterExpr
	MatcherExpr   MatcherExpr
	op            int
	intVal        int
	bytes         uint64
	str           string
	falVal        float64
	duration      string
	val           string
	exprType      int
	strs          []string
	ValExpr       any
	EmptyGroup    any
	BinaryExpr    *BinaryExpr
	MemberExpr    MemberExpr
	StringExpr    StringExpr
	IndexExpr     IndexExpr
	RootSymbol    Symbol
	CurrentSymbol Symbol
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault         = 57384
	yyEofCode         = 57344
	ADD               = 57358
	AND               = 57364
	AND2              = 57367
	AT                = 57378
	CLOSE_BRACE       = 57371
	CLOSE_BRACKET     = 57375
	CLOSE_PARENTHESIS = 57373
	COLON             = 57381
	COMMA             = 57380
	DIV               = 57361
	DOLLAR            = 57377
	DOT               = 57376
	DOTDOT            = 57379
	EQ                = 57350
	FLOAT             = 57348
	GT                = 57352
	GTE               = 57353
	IDENTIFIER        = 57346
	IN                = 57368
	INT               = 57349
	LT                = 57354
	LTE               = 57355
	MOD               = 57362
	MUL               = 57360
	NEQ               = 57351
	NIN               = 57369
	NRE               = 57357
	OPEN_BRACE        = 57370
	OPEN_BRACKET      = 57374
	OPEN_PARENTHESIS  = 57372
	OR                = 57365
	OR2               = 57366
	POW               = 57363
	QUESTION          = 57383
	RE                = 57356
	SCOLON            = 57382
	STRING            = 57347
	SUB               = 57359
	yyErrCode         = 57345

	yyMaxDepth = 200
	yyTabOfs   = -49
)

var (
	yyPrec = map[int]int{
		EQ:                0,
		NEQ:               0,
		GT:                0,
		GTE:               0,
		LT:                0,
		LTE:               0,
		RE:                0,
		NRE:               0,
		ADD:               1,
		SUB:               1,
		MUL:               1,
		DIV:               1,
		MOD:               1,
		POW:               1,
		AND:               2,
		OR:                2,
		OR2:               2,
		AND2:              2,
		IN:                2,
		NIN:               2,
		OPEN_BRACE:        3,
		CLOSE_BRACE:       3,
		OPEN_PARENTHESIS:  3,
		CLOSE_PARENTHESIS: 3,
		OPEN_BRACKET:      3,
		CLOSE_BRACKET:     3,
		DOT:               4,
		DOLLAR:            4,
		AT:                4,
		DOTDOT:            4,
		COMMA:             4,
		COLON:             4,
		SCOLON:            4,
		QUESTION:          4,
	}

	yyXLAT = map[int]int{
		57375: 0,  // CLOSE_BRACKET (39x)
		57373: 1,  // CLOSE_PARENTHESIS (29x)
		57380: 2,  // COMMA (29x)
		57374: 3,  // OPEN_BRACKET (29x)
		57344: 4,  // $end (23x)
		57350: 5,  // EQ (22x)
		57352: 6,  // GT (22x)
		57353: 7,  // GTE (22x)
		57368: 8,  // IN (22x)
		57354: 9,  // LT (22x)
		57355: 10, // LTE (22x)
		57351: 11, // NEQ (22x)
		57369: 12, // NIN (22x)
		57357: 13, // NRE (22x)
		57356: 14, // RE (22x)
		57376: 15, // DOT (21x)
		57379: 16, // DOTDOT (21x)
		57378: 17, // AT (14x)
		57377: 18, // DOLLAR (14x)
		57349: 19, // INT (14x)
		57388: 20, // index (12x)
		57395: 21, // selector (12x)
		57359: 22, // SUB (12x)
		57348: 23, // FLOAT (10x)
		57386: 24, // expr (6x)
		57346: 25, // IDENTIFIER (6x)
		57391: 26, // member (6x)
		57394: 27, // segment (6x)
		57347: 28, // STRING (6x)
		57381: 29, // COLON (4x)
		57392: 30, // negint (4x)
		57389: 31, // matcher (3x)
		57383: 32, // QUESTION (3x)
		57390: 33, // matchers (2x)
		57360: 34, // MUL (2x)
		57385: 35, // compairOp (1x)
		57387: 36, // includeOp (1x)
		57372: 37, // OPEN_PARENTHESIS (1x)
		57393: 38, // range (1x)
		57396: 39, // start (1x)
		57397: 40, // valExpr (1x)
		57384: 41, // $default (0x)
		57358: 42, // ADD (0x)
		57364: 43, // AND (0x)
		57367: 44, // AND2 (0x)
		57371: 45, // CLOSE_BRACE (0x)
		57361: 46, // DIV (0x)
		57345: 47, // error (0x)
		57362: 48, // MOD (0x)
		57370: 49, // OPEN_BRACE (0x)
		57365: 50, // OR (0x)
		57366: 51, // OR2 (0x)
		57363: 52, // POW (0x)
		57382: 53, // SCOLON (0x)
	}

	yySymNames = []string{
		"CLOSE_BRACKET",
		"CLOSE_PARENTHESIS",
		"COMMA",
		"OPEN_BRACKET",
		"$end",
		"EQ",
		"GT",
		"GTE",
		"IN",
		"LT",
		"LTE",
		"NEQ",
		"NIN",
		"NRE",
		"RE",
		"DOT",
		"DOTDOT",
		"AT",
		"DOLLAR",
		"INT",
		"index",
		"selector",
		"SUB",
		"FLOAT",
		"expr",
		"IDENTIFIER",
		"member",
		"segment",
		"STRING",
		"COLON",
		"negint",
		"matcher",
		"QUESTION",
		"matchers",
		"MUL",
		"compairOp",
		"includeOp",
		"OPEN_PARENTHESIS",
		"range",
		"start",
		"valExpr",
		"$default",
		"ADD",
		"AND",
		"AND2",
		"CLOSE_BRACE",
		"DIV",
		"error",
		"MOD",
		"OPEN_BRACE",
		"OR",
		"OR2",
		"POW",
		"SCOLON",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {39, 1},
		2:  {24, 3},
		3:  {24, 3},
		4:  {24, 1},
		5:  {24, 3},
		6:  {24, 3},
		7:  {24, 3},
		8:  {27, 1},
		9:  {27, 1},
		10: {27, 1},
		11: {27, 2},
		12: {27, 2},
		13: {27, 3},
		14: {27, 3},
		15: {27, 3},
		16: {27, 3},
		17: {26, 1},
		18: {26, 1},
		19: {20, 3},
		20: {20, 2},
		21: {21, 3},
		22: {21, 3},
		23: {38, 1},
		24: {38, 2},
		25: {38, 2},
		26: {38, 3},
		27: {33, 1},
		28: {33, 3},
		29: {33, 2},
		30: {31, 1},
		31: {31, 6},
		32: {31, 8},
		33: {40, 1},
		34: {40, 1},
		35: {40, 2},
		36: {40, 1},
		37: {35, 1},
		38: {35, 1},
		39: {35, 1},
		40: {35, 1},
		41: {35, 1},
		42: {35, 1},
		43: {35, 1},
		44: {35, 1},
		45: {36, 1},
		46: {36, 1},
		47: {30, 1},
		48: {30, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [73][]uint8{
		// 0
		{17: 53, 52, 24: 51, 39: 50},
		{4: 49},
		{4: 48},
		{15: 118, 119},
		{45, 45, 45, 54, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 55, 56},
		// 5
		{117},
		{3: 63, 20: 59, 60, 25: 61, 58, 116, 62},
		{3: 63, 20: 59, 60, 25: 61, 58, 57, 62},
		{42, 42, 42, 63, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 110, 111, 20: 108, 109},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 10
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{65, 17: 53, 52, 72, 22: 73, 24: 70, 29: 68, 64, 69, 71, 67, 38: 66},
		// 15
		{105, 29: 106},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{104},
		{103, 2: 91},
		{26, 19: 72, 22: 73, 30: 102},
		// 20
		{22, 2: 22},
		{19, 2: 19},
		{37: 75},
		{2, 2, 29: 2},
		{19: 74},
		// 25
		{1, 1, 29: 1},
		{17: 53, 52, 24: 76},
		{5: 79, 81, 82, 87, 83, 84, 80, 88, 86, 85, 35: 77, 78},
		{17: 53, 52, 72, 22: 98, 97, 96, 30: 99, 40: 95},
		{3: 89},
		// 30
		{17: 12, 12, 12, 22: 12, 12},
		{17: 11, 11, 11, 22: 11, 11},
		{17: 10, 10, 10, 22: 10, 10},
		{17: 9, 9, 9, 22: 9, 9},
		{17: 8, 8, 8, 22: 8, 8},
		// 35
		{17: 7, 7, 7, 22: 7, 7},
		{17: 6, 6, 6, 22: 6, 6},
		{17: 5, 5, 5, 22: 5, 5},
		{3: 4},
		{3: 3},
		// 40
		{17: 53, 52, 24: 70, 31: 69, 71, 90},
		{92, 2: 91},
		{20, 2: 20, 17: 53, 52, 24: 70, 31: 94, 71},
		{1: 93},
		{17, 2: 17},
		// 45
		{21, 2: 21},
		{1: 101},
		{1: 16},
		{1: 15},
		{19: 74, 23: 100},
		// 50
		{1: 13},
		{1: 14},
		{18, 2: 18},
		{25},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		// 55
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{24, 19: 72, 22: 73, 30: 107},
		{23},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 60
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{3: 63, 20: 59, 60, 25: 61, 58, 114, 62, 34: 115},
		{3: 63, 20: 59, 60, 25: 61, 58, 112, 62, 34: 113},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 20: 108, 109},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 65
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 20: 108, 109},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{43, 43, 43, 63, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 110, 111, 20: 108, 109},
		{44, 44, 44, 4: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{3: 63, 20: 59, 60, 25: 61, 58, 121, 62},
		// 70
		{3: 63, 20: 59, 60, 25: 61, 58, 120, 62},
		{46, 46, 46, 63, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 110, 111, 20: 108, 109},
		{47, 47, 47, 63, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 110, 111, 20: 108, 109},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 47

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yylex.(*parser).expr = yyS[yypt-0].Expr
		}
	case 2:
		{
			yyVAL.Expr = &BinaryExpr{Left: RootSymbol, Right: yyS[yypt-0].Expr, Op: DOT}
		}
	case 3:
		{
			yyVAL.Expr = &BinaryExpr{Left: RootSymbol, Right: yyS[yypt-0].Expr, Op: DOTDOT}
		}
	case 4:
		{
			yyVAL.Expr = CurrentSymbol
		}
	case 5:
		{
			yyVAL.Expr = &EmptyGroup{Owner: yyS[yypt-2].op}
		}
	case 6:
		{
			yyVAL.Expr = &BinaryExpr{Left: CurrentSymbol, Right: yyS[yypt-0].Expr, Op: DOT}
		}
	case 7:
		{
			yyVAL.Expr = &BinaryExpr{Left: CurrentSymbol, Right: yyS[yypt-0].Expr, Op: DOTDOT}
		}
	case 8:
		{
			yyVAL.Expr = yyS[yypt-0].Expr
		}
	case 9:
		{
			yyVAL.Expr = yyS[yypt-0].Expr
		}
	case 10:
		{
			yyVAL.Expr = yyS[yypt-0].Expr
		}
	case 11:
		{
			yyVAL.Expr = &BinaryExpr{Left: yyS[yypt-1].Expr, Right: yyS[yypt-0].Expr, Op: OPEN_BRACKET}
		}
	case 12:
		{
			yyVAL.Expr = &BinaryExpr{Left: yyS[yypt-1].Expr, Right: yyS[yypt-0].Expr, Op: OPEN_BRACKET}
		}
	case 13:
		{
			yyVAL.Expr = &BinaryExpr{Left: yyS[yypt-2].Expr, Right: yyS[yypt-0].Expr, Op: DOT}
		}
	case 14:
		{
			yyVAL.Expr = &BinaryExpr{Left: yyS[yypt-2].Expr, Right: yyS[yypt-0].Expr, Op: DOTDOT}
		}
	case 15:
		{
			yyVAL.Expr = &BinaryExpr{Left: yyS[yypt-2].Expr, Right: WildcardSymbol, Op: DOT}
		}
	case 16:
		{
			yyVAL.Expr = &BinaryExpr{Left: yyS[yypt-2].Expr, Right: WildcardSymbol, Op: DOTDOT}
		}
	case 17:
		{
			yyVAL.Expr = MemberExpr(yyS[yypt-0].str)
		}
	case 18:
		{
			yyVAL.Expr = StringExpr(yyS[yypt-0].str)
		}
	case 19:
		{
			yyVAL.Expr = IndexExpr(yyS[yypt-1].intVal)
		}
	case 20:
		{
			yyVAL.Expr = &EmptyGroup{Owner: nil}
		}
	case 21:
		{
			yyVAL.Expr = yyS[yypt-1].Expr
		}
	case 22:
		{
			yyVAL.Expr = yyS[yypt-1].MatcherExpr
		}
	case 23:
		{
			yyVAL.Expr = RangeExpr{0, -1}
		}
	case 24:
		{
			yyVAL.Expr = RangeExpr{0, yyS[yypt-0].intVal}
		}
	case 25:
		{
			yyVAL.Expr = RangeExpr{yyS[yypt-1].intVal, -1}
		}
	case 26:
		{
			yyVAL.Expr = RangeExpr{yyS[yypt-2].intVal, yyS[yypt-0].intVal}
		}
	case 27:
		{
			yyVAL.MatcherExpr = MatcherExpr{yyS[yypt-0].Expr}
		}
	case 28:
		{
			yyVAL.MatcherExpr = append(yyS[yypt-2].MatcherExpr, yyS[yypt-0].Expr)
		}
	case 29:
		{
			yyVAL.MatcherExpr = yyS[yypt-1].MatcherExpr
		}
	case 30:
		{
			yyVAL.Expr = yyS[yypt-0].Expr
		}
	case 31:
		{
			yyVAL.Expr = &FilterExpr{Body: &BinaryExpr{Left: yyS[yypt-3].Expr, Right: yyS[yypt-1].Expr, Op: yyS[yypt-2].op}}
		}
	case 32:
		{
			yyVAL.Expr = &FilterExpr{Body: &BinaryExpr{Left: yyS[yypt-5].Expr, Right: yyS[yypt-2].MatcherExpr, Op: yyS[yypt-4].op}}
		}
	case 33:
		{
			yyVAL.Expr = yyS[yypt-0].Expr
		}
	case 34:
		{
			yyVAL.Expr = FloatValue(yyS[yypt-0].falVal)
		}
	case 35:
		{
			yyVAL.Expr = FloatValue(-yyS[yypt-0].falVal)
		}
	case 36:
		{
			yyVAL.Expr = yyS[yypt-0].intVal
		}
	case 37:
		{
			yyVAL.op = EQ
		}
	case 38:
		{
			yyVAL.op = NEQ
		}
	case 39:
		{
			yyVAL.op = GT
		}
	case 40:
		{
			yyVAL.op = GTE
		}
	case 41:
		{
			yyVAL.op = LT
		}
	case 42:
		{
			yyVAL.op = LTE
		}
	case 43:
		{
			yyVAL.op = RE
		}
	case 44:
		{
			yyVAL.op = NRE
		}
	case 45:
		{
			yyVAL.op = IN
		}
	case 46:
		{
			yyVAL.op = NIN
		}
	case 47:
		{
			yyVAL.intVal = yyS[yypt-0].intVal
		}
	case 48:
		{
			yyVAL.intVal = -yyS[yypt-0].intVal
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
